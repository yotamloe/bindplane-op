// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/observiq/bindplane-op/model"
	mock "github.com/stretchr/testify/mock"

	server "github.com/observiq/bindplane-op/internal/server"

	store "github.com/observiq/bindplane-op/internal/store"

	testing "testing"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// Agent provides a mock function with given fields: ctx, agentID
func (_m *Manager) Agent(ctx context.Context, agentID string) (*model.Agent, error) {
	ret := _m.Called(ctx, agentID)

	var r0 *model.Agent
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Agent); ok {
		r0 = rf(ctx, agentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Agent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, agentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentUpdates provides a mock function with given fields: ctx, agent
func (_m *Manager) AgentUpdates(ctx context.Context, agent *model.Agent) (*server.AgentUpdates, error) {
	ret := _m.Called(ctx, agent)

	var r0 *server.AgentUpdates
	if rf, ok := ret.Get(0).(func(context.Context, *model.Agent) *server.AgentUpdates); ok {
		r0 = rf(ctx, agent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*server.AgentUpdates)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Agent) error); ok {
		r1 = rf(ctx, agent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableProtocol provides a mock function with given fields: _a0
func (_m *Manager) EnableProtocol(_a0 server.Protocol) {
	_m.Called(_a0)
}

// ResourceStore provides a mock function with given fields:
func (_m *Manager) ResourceStore() model.ResourceStore {
	ret := _m.Called()

	var r0 model.ResourceStore
	if rf, ok := ret.Get(0).(func() model.ResourceStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ResourceStore)
		}
	}

	return r0
}

// Start provides a mock function with given fields: ctx
func (_m *Manager) Start(ctx context.Context) {
	_m.Called(ctx)
}

// UpsertAgent provides a mock function with given fields: ctx, agentID, updater
func (_m *Manager) UpsertAgent(ctx context.Context, agentID string, updater store.AgentUpdater) (*model.Agent, error) {
	ret := _m.Called(ctx, agentID, updater)

	var r0 *model.Agent
	if rf, ok := ret.Get(0).(func(context.Context, string, store.AgentUpdater) *model.Agent); ok {
		r0 = rf(ctx, agentID, updater)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Agent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, store.AgentUpdater) error); ok {
		r1 = rf(ctx, agentID, updater)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifySecretKey provides a mock function with given fields: ctx, secretKey
func (_m *Manager) VerifySecretKey(ctx context.Context, secretKey string) bool {
	ret := _m.Called(ctx, secretKey)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, secretKey)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewManager creates a new instance of Manager. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewManager(t testing.TB) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
